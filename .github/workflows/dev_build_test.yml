name: Build & run tests (dev)

on:
  pull_request:
    branches: [ dev ]
    
jobs:

  frontend-develop:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0
      with:
        fetch-depth: 0

    - name: Install node.js
      uses: actions/setup-node@v1
      with:
        node-version: 16

    - name: Install dependencies
      run: |
        cd $PWD/TokanPages.ClientApp
        npm install --global yarn
        yarn install
        yarn global add sonarqube-scanner

    - name: Test client application
      run: |
        cd $PWD/TokanPages.ClientApp
        yarn app-test --ci --coverage
        yarn sonar \
        -Dsonar.login=${{ secrets.SONARQUBE_TOKEN_FE }} \
        -Dsonar.projectKey=${{ secrets.SONARQUBE_PROJECT_KEY_FE }} \
        -Dsonar.host.url=${{ secrets.SONARQUBE_HOST }}

  backend-develop:

    runs-on: ubuntu-latest

    env:
      TARGET_DIRECTORY: $PWD/sonarqubecoverage
      COVERAGE_REPORT: $PWD/*/*/TestResults/*/coverage.cobertura.xml
      SONAR_REPORT: SonarQube.xml

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - name: Get Azure Key Vault secrets
      uses: AzureKeyVault@1
      inputs:
        azureSubscription: "${{ secrets.AZURE_SUBSCRIPTION }}"
        KeyVaultName: "${{ secrets.AZURE_KEY_VAULT }}"
        SecretsFilter: "*"
        RunAsPreJob: true

    - name: Variable substitution appsettings file for Testing (.NET)
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ github.workspace }}/TokanPages.Configuration/appsettings.Testing.json
      env:
        Email_PrivateKey: "${{ TestEmailPrivateKey }}"
        Email_BaseUrl: "${{ TestEmailBaseUrl }}"
        Email_Address_Admin: "${{ TestEmailAddressesAdmin }}"
        Email_Address_Contact: "${{ TestEmailAddressesContact }}"
        Email_Address_Support: "${{ TestEmailAddressesItSupport }}"
        Db_DatabaseContext: "${{ TestDbConnect }}"
        Db_DatabaseContext_Migrator: "${{ TestDbMigrator }}"
        AZ_Storage_BaseUrl: "${{ TestAzStorageBaseUrl }}"
        AZ_Storage_ContainerName: "${{ TestAzStorageContainerName }}"
        AZ_Storage_ConnectionString: "${{ TestAzStorageConnectionString }}"
        AZ_Storage_MaxFileSizeUserMedia: "${{ TestAzStorageMaxFileSizeUserMedia }}"
        AZ_Storage_MaxFileSizeSingleAsset: "${{ TestAzStorageMaxFileSizeSingleAsset }}"
        AZ_Redis_InstanceName: "${{ TestAzRedisInstanceName }}"
        AZ_Redis_ConnectionString: "${{ TestAzRedisConnectionString }}"
        AZ_Redis_ExpirationMinute: "${{ TestAzRedisExpirationMinute }}"
        AZ_Redis_ExpirationSecond: "${{ TestAzRedisExpirationSecond }}"
        Paths_UpdateSubscriber: "${{ TestPathsUpdateSubscriber }}"
        Paths_Unsubscribe: "${{ TestPathsUnsubscribe }}"
        Paths_UpdatePassword: "${{ TestPathsUpdatePassword }}"
        Paths_Activation: "${{ TestPathsActivation }}"
        Paths_DevelopmentOrigin: "${{ TestPathsDevelopmentOrigin }}"
        Paths_DeploymentOrigin: "${{ TestPathsDeploymentOrigin }}"
        Paths_Templates_Newsletter: "${{ TestPathsNewsletter }}"
        Paths_Templates_ContactForm: "${{ TestPathsContactForm }}"
        Paths_Templates_ResetPassword: "${{ TestPathsResetPassword }}"
        Paths_Templates_RegisterForm: "${{ TestPathsRegisterForm }}"
        Ids_Issuer: "${{ TestIdsIssuer }}"
        Ids_Audience: "${{ TestIdsAudience }}"
        Ids_WebSecret: "${{ TestIdsWebSecret }}"
        Ids_RequireHttps: "${{ TestIdsRequireHttps }}"
        Ids_WebToken_Maturity: "${{ TestIdsWebTokenMaturity }}"
        Ids_RefreshToken_Maturity: "${{ TestIdsRefreshTokenMaturity }}"
        Limit_Reset_Maturity: "${{ TestLimitsResetMaturity }}"
        Limit_Activation_Maturity: "${{ TestLimitsActivationMaturity }}"
        Limit_Likes_Anonymous: "${{ TestLimitsLikesAnonymous }}"
        Limit_Likes_User: "${{ TestLimitsLikesUser }}"

    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Install dependencies
      run: dotnet restore

    - name: SonarQube begin scan dotnet
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool update dotnet-reportgenerator-globaltool -g
        dotnet sonarscanner begin \
        /k:${{ secrets.SONARQUBE_PROJECT_KEY_BE }} \
        /d:sonar.login=${{ secrets.SONARQUBE_TOKEN_BE }} \
        /d:sonar.host.url=${{ secrets.SONARQUBE_HOST }} \
        /d:sonar.coverageReportPaths="${{ env.TARGET_DIRECTORY }}/${{ env.SONAR_REPORT }}"

    - name: Build .NET
      run: dotnet build

    - name: Test with the dotnet CLI
      run: |
        ASPNETCORE_ENVIRONMENT=Testing dotnet test --no-build --collect:"XPlat Code Coverage"
        mkdir "${{ env.TARGET_DIRECTORY }}"
        reportgenerator "-reports:${{ env.COVERAGE_REPORT }}" "-targetdir:${{ env.TARGET_DIRECTORY }}" "-reporttypes:SonarQube"
      env:
        ASPNETCORE_ENVIRONMENT: Testing

    - name: SonarQube end scan dotnet
      run: dotnet sonarscanner end /d:sonar.login=${{ secrets.SONARQUBE_TOKEN_BE }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
