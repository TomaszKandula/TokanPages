name: Build & run tests (dev)

on:
  pull_request:
    branches: [ dev ]
    
jobs:

  dev-branch-check:

    runs-on: ubuntu-latest

    env:
      TARGET_DIRECTORY: $PWD/sonarqubecoverage
      COVERAGE_REPORT: $PWD/*/TestResults/*/coverage.cobertura.xml
      SONAR_REPORT: SonarQube.xml

    steps:
    
    - name: Checkout repository
      uses: actions/checkout@v2.2.0
      with:
        fetch-depth: 0

    - name: Install node.js
      uses: actions/setup-node@v1
      with:
        node-version: 15

    - name: Install dependencies
      run: |
        cd $PWD/TokanPages.ClientApp
        npm install --global yarn
        yarn install
        yarn global add sonarqube-scanner

    - name: Test client application
      run: |
        cd $PWD/TokanPages.ClientApp
        yarn app-test --ci --coverage
        yarn sonar \
        -Dsonar.login=${{ secrets.SONARQUBE_TOKEN_FE }} \
        -Dsonar.projectKey=${{ secrets.SONARQUBE_PROJECT_KEY_FE }} \
        -Dsonar.host.url=${{ secrets.SONARQUBE_HOST }}

    - name: Variable substitution appsettings file for Staging (NET Core)
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ github.workspace }}/TokanPages.WebApi/appsettings.Staging.json
      env:
        ApplicationPaths.UpdateSubscriberPath: "${{ secrets.APPLICATIONPATHS__UPDATESUBSCRIBERPATH_STAGE }}"
        ApplicationPaths.UnsubscribePath: "${{ secrets.APPLICATIONPATHS__UNSUBSCRIBEPATH_STAGE }}"
        ApplicationPaths.UpdatePasswordPath: "${{ secrets.APPLICATIONPATHS__UPDATEPASSWORDPATH_STAGE }}"
        ApplicationPaths.DevelopmentOrigin: "${{ secrets.APPLICATIONPATHS__DEVELOPMENTORIGIN_STAGE }}"
        ApplicationPaths.DeploymentOrigin: "${{ secrets.APPLICATIONPATHS__DEPLOYMENTORIGIN_STAGE }}"
        AzureStorage.BaseUrl: "${{ secrets.AZURESTORAGE__BASEURL_TEST }}"
        AzureStorage.ContainerName: "${{ secrets.AZURESTORAGE__CONTAINERNAME_TEST }}"
        AzureStorage.ConnectionString: "${{ secrets.AZURESTORAGE__CONNECTIONSTRING_TEST }}"
        Sentry.Dsn: "${{ secrets.SENTRY__DSN_STAGE }}"
        ConnectionStrings.DbConnect: "${{ secrets.CONNECTIONSTRINGS__DBCONNECT_STAGE }}"
        ConnectionStrings.DbConnectTest: "${{ secrets.CONNECTIONSTRINGS__DBCONNECT_TEST }}"
        SmtpServer.Account: "${{ secrets.SMTPSERVER__ACCOUNT_STAGE }}"
        SmtpServer.Password: "${{ secrets.SMTPSERVER__PASSWORD_STAGE }}"
        SmtpServer.Port: "${{ secrets.SMTPSERVER__PORT_STAGE }}"
        SmtpServer.Server: "${{ secrets.SMTPSERVER__SERVER_STAGE }}"
        IdentityServer.Issuer: "${{ secrets.IDENTITYSERVER__ISSUER_STAGE }}"
        IdentityServer.Audience: "${{ secrets.IDENTITYSERVER__AUDIENCE_STAGE }}"
        IdentityServer.WebSecret: "${{ secrets.IDENTITYSERVER__WEBSECRET_STAGE }}"
        IdentityServer.RequireHttps: "${{ secrets.IDENTITYSERVER__REQUIREHTTPS_STAGE }}"
        IdentityServer.WebTokenExpiresIn: "${{ secrets.IDENTITYSERVER__WEBTOKENEXPIRESIN_STAGE }}"
        IdentityServer.RefreshTokenExpiresIn: "${{ secrets.IDENTITYSERVER__REFRESHTOKENEXPIRESIN_STAGE }}"
        ExpirationSettings.ResetIdExpiresIn: "${{ secrets.EXPIRATIONSETTINGS__RESETIDEXPIRESIN_STAGE }}"
        ExpirationSettings.ActivationIdExpiresIn: "${{ secrets.EXPIRATIONSETTINGS__ACTIVATIONIDEXPIRESIN_STAGE }}"
        SonarQube.Server: "${{ secrets.SONARQUBE_HOST }}"
        SonarQube.Token: "${{ secrets.SONARQUBE_TOKEN_API }}"

    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0.x'

    - name: Install dependencies
      run: dotnet restore

    - name: SonarQube begin scan dotnet
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool update dotnet-reportgenerator-globaltool -g
        dotnet sonarscanner begin \
        /k:${{ secrets.SONARQUBE_PROJECT_KEY_BE }} \
        /d:sonar.login=${{ secrets.SONARQUBE_TOKEN_BE }} \
        /d:sonar.host.url=${{ secrets.SONARQUBE_HOST }} \
        /d:sonar.coverageReportPaths="${{ env.TARGET_DIRECTORY }}/${{ env.SONAR_REPORT }}"

    - name: Build .NET
      run: dotnet build

    - name: Test with the dotnet CLI
      run: |
        dotnet test --no-build --collect:"XPlat Code Coverage"
        mkdir "${{ env.TARGET_DIRECTORY }}"
        reportgenerator "-reports:${{ env.COVERAGE_REPORT }}" "-targetdir:${{ env.TARGET_DIRECTORY }}" "-reporttypes:SonarQube"
      env:
        ASPNETCORE_ENVIRONMENT: Development

    - name: SonarQube end scan dotnet
      run: dotnet sonarscanner end /d:sonar.login=${{ secrets.SONARQUBE_TOKEN_BE }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
