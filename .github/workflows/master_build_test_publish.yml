name: Build, test and publish (master)

on:
  push:
    branches: [ master ]

jobs:

  versioning:

    runs-on: ubuntu-latest

    outputs:
      outputs1: ${{ steps.versioning.outputs.version }}
      outputs2: ${{ steps.versioning.outputs.published }}

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - name: Semantic Release (install node.js)
      uses: actions/setup-node@v1
      with:
        node-version: 16

    - name: Semantic Release (install dependencies)
      run: |
        npm install --global yarn
        yarn install

    - name: Semantic Release (process changes)
      uses: cycjimmy/semantic-release-action@v2
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
    
    - name: Move results to outputs
      id: versioning
      run: |
        echo "::set-output name=version::${{ steps.semantic.outputs.new_release_version }}"
        echo "::set-output name=published::${{ steps.semantic.outputs.new_release_published }}"

  frontend-production:

    runs-on: ubuntu-latest

    needs: versioning

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - name: Production | Build Docker (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Build Docker (execute with tests)
      run: |
        cd $PWD/TokanPages.ClientApp
        APP_VERSION=${{ needs.versioning.outputs.outputs1 }}
        BUILD_TIMESTAMP=$(date +"%Y-%m-%d at %T")
        docker build . \
        --build-arg "API_VERSION=${{ secrets.API_VERSION }}" \
        --build-arg "APP_VERSION=$APP_VERSION" \
        --build-arg "APP_DATE_TIME=$BUILD_TIMESTAMP" \
        --build-arg "APP_FRONTEND=${{ secrets.APP_FRONTEND_PRODUCTION }}" \
        --build-arg "APP_BACKEND=${{ secrets.APP_BACKEND_PRODUCTION }}" \
        --build-arg "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS_PRODUCTION }}" \
        -t ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:frontend-production-${{ github.sha }}

    - name: Production | Push Docker image (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Push Docker image
      if: needs.versioning.outputs.outputs2 == 'true'
      run: docker push ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:frontend-production-${{ github.sha }}

    # NOTE: due to a budget constraints, we use separate Azure App Service for staging slots. 
    # Microsoft Azure pricing tiers B1, B2 and B3 do not allow separate slots.
    - name: Production | Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      if: needs.versioning.outputs.outputs2 == 'true'
      with:
        app-name: tokanpages
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PROFILE_FE_PROD }}
        images: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:frontend-production-${{ github.sha }}

  backend-production:

    runs-on: ubuntu-latest
    
    needs: versioning

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0
    
    - name: Variable substitution appsettings file for Production (.NET)
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ github.workspace }}/TokanPages.Configuration/appsettings.Production.json
      env:
        Email_PrivateKey: "${{ secrets.PROD_EMAIL_PRIVATEKEY }}"
        Email_BaseUrl: "${{ secrets.PROD_EMAIL_BASEURL }}"
        Email_Address_Admin: "${{ secrets.PROD_EMAIL_ADDRESSES_ADMIN }}"
        Email_Address_Contact: "${{ secrets.PROD_EMAIL_ADDRESSES_CONTACT }}"
        Email_Address_Support: "${{ secrets.PROD_EMAIL_ADDRESSES_ITSUPPORT }}"
        Db_Connection: "${{ secrets.PROD_DBCONNECT }}"
        AZ_Storage_BaseUrl: "${{ secrets.PROD_AZSTORAGE_BASEURL }}"
        AZ_Storage_ContainerName: "${{ secrets.PROD_AZSTORAGE_CONTAINERNAME }}"
        AZ_Storage_ConnectionString: "${{ secrets.PROD_AZSTORAGE_CONNECTIONSTRING }}"
        AZ_Storage_MaxFileSizeUserMedia: "${{ secrets.PROD_AZSTORAGE_MAXFILESIZEUSERMEDIA }}"
        AZ_Storage_MaxFileSizeSingleAsset: "${{ secrets.PROD_AZSTORAGE_MAXFILESIZESINGLEASSET }}"
        AZ_Redis_InstanceName: "${{ secrets.PROD_AZREDIS_INSTANCENAME }}"
        AZ_Redis_ConnectionString: "${{ secrets.PROD_AZREDIS_CONNECTIONSTRING }}"
        AZ_Redis_ExpirationMinute: "${{ secrets.PROD_AZREDIS_EXPIRATIONMINUTE }}"
        AZ_Redis_ExpirationSecond: "${{ secrets.PROD_AZREDIS_EXPIRATIONSECOND }}"
        Paths_UpdateSubscriber: "${{ secrets.PROD_PATHS_UPDATESUBSCRIBER }}"
        Paths_Unsubscribe: "${{ secrets.PROD_PATHS_UNSUBSCRIBE }}"
        Paths_UpdatePassword: "${{ secrets.PROD_PATHS_UPDATEPASSWORD }}"
        Paths_Activation: "${{ secrets.PROD_PATHS_ACTIVATION }}"
        Paths_DevelopmentOrigin: "${{ secrets.PROD_PATHS_DEVELOPMENTORIGIN }}"
        Paths_DeploymentOrigin: "${{ secrets.PROD_PATHS_DEPLOYMENTORIGIN }}"
        Paths_Templates_Newsletter: "${{ secrets.PROD_PATHS_NEWSLETTER }}"
        Paths_Templates_ContactForm: "${{ secrets.PROD_PATHS_CONTACTFORM }}"
        Paths_Templates_ResetPassword: "${{ secrets.PROD_PATHS_RESETPASSWORD }}"
        Paths_Templates_RegisterForm: "${{ secrets.PROD_PATHS_REGISTERFORM }}"
        Ids_Issuer: "${{ secrets.PROD_IDS_ISSUER }}"
        Ids_Audience: "${{ secrets.PROD_IDS_AUDIENCE }}"
        Ids_WebSecret: "${{ secrets.PROD_IDS_WEBSECRET }}"
        Ids_RequireHttps: "${{ secrets.PROD_IDS_REQUIREHTTPS }}"
        Ids_WebToken_Maturity: "${{ secrets.PROD_IDS_WEBTOKEN_MATURITY }}"
        Ids_RefreshToken_Maturity: "${{ secrets.PROD_IDS_REFRESHTOKEN_MATURITY }}"
        Limit_Reset_Maturity: "${{ secrets.PROD_LIMITS_RESET_MATURITY }}"
        Limit_Activation_Maturity: "${{ secrets.PROD_LIMITS_ACTIVATION_MATURITY }}"
        Limit_Likes_Anonymous: "${{ secrets.PROD_LIMITS_LIKES_ANONYMOUS }}"
        Limit_Likes_User: "${{ secrets.PROD_LIMITS_LIKES_USER }}"

    - name: Production | Build Docker (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Build Docker (execute with tests)
      run: |
        docker build . \
        --build-arg "ENV_VALUE=Production" \
        -t ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:backend-production-${{ github.sha }}

    - name: Production | Push Docker image (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Push Docker image (execute for new release only)
      if: needs.versioning.outputs.outputs2 == 'true'
      run: docker push ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:backend-production-${{ github.sha }}

    # NOTE: due to a budget constraints, we use separate Azure App Service for staging slots. 
    # Microsoft Azure pricing tiers B1, B2 and B3 do not allow separate slots.
    - name: Production | Deploy to Azure Web App (for new release only)
      uses: azure/webapps-deploy@v2
      if: needs.versioning.outputs.outputs2 == 'true'
      with:
        app-name: tokanpages-backend
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PROFILE_BE_PROD }}
        images: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:backend-production-${{ github.sha }}
