name: Build, test and publish (master)

on:
  push:
    branches: [ master ]

jobs:

  frontend-production:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - name: Production | Build Docker (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Production | Build Docker (execute with tests)
      run: |
        cd $PWD/TokanPages.ClientApp
        APP_VERSION="0.0.1-staging"
        BUILD_TIMESTAMP=$(date +"%Y-%m-%d at %T")
        docker build . \
        --build-arg "APP_VERSION=$APP_VERSION" \
        --build-arg "APP_DATE_TIME=$BUILD_TIMESTAMP" \
        --build-arg "ALLOW_CORS=${{ secrets.ALLOW_CORS_PRODUCTION }}" \
        --build-arg "APP_FRONTEND=${{ secrets.APP_FRONTEND_PRODUCTION }}" \
        --build-arg "APP_BACKEND=${{ secrets.APP_BACKEND_PRODUCTION }}" \
        --build-arg "APP_STORAGE=${{ secrets.APP_STORAGE_PRODUCTION }}" \
        --build-arg "APP_SENTRY=${{ secrets.APP_SENTRY_PRODUCTION }}" \
        -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ secrets.REGISTRY_USERNAME }}:frontend-production-${{ github.sha }}

    - name: Production | Push Docker image (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Production | Push Docker image
      run: docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ secrets.REGISTRY_USERNAME }}:frontend-production-${{ github.sha }}

    - name: Production | Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: tokanpages
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_STAGE }}
        images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ secrets.REGISTRY_USERNAME }}:frontend-production-${{ github.sha }}

  backend-production:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - name: Semantic Release (install node.js)
      uses: actions/setup-node@v1
      with:
        node-version: 14
    
    - name: Semantic Release (install dependencies)
      run: | 
        npm install --global yarn
        yarn install

    - name: Semantic Release (process changes)
      uses: cycjimmy/semantic-release-action@v2
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
    
    - name: Variable substitution appsettings file for Staging (NET Core)
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ github.workspace }}/TokanPages.Api/appsettings.Staging.json
      env:
        AppUrls.UpdateSubscriberPath: "${{ secrets.APPURLS__UPDATESUBSCRIBERPATH_PRODUCTION }}"
        AppUrls.UnsubscribePath: "${{ secrets.APPURLS__UNSUBSCRIBEPATH_PRODUCTION }}"
        AppUrls.DevelopmentOrigin: "${{ secrets.APPURLS__DEVELOPMENTORIGIN_PRODUCTION }}"
        AppUrls.DeploymentOrigin: "${{ secrets.APPURLS__DEPLOYMENTORIGIN_PRODUCTION }}"
        AzureStorage.BaseUrl: "${{ secrets.AZURESTORAGE__BASEURL_PRODUCTION }}"
        AzureStorage.ContainerName: "${{ secrets.AZURESTORAGE__CONTAINERNAME_PRODUCTION }}"
        AzureStorage.ConnectionString: "${{ secrets.AZURESTORAGE__CONNECTIONSTRING_PRODUCTION }}"
        Sentry.Dsn: "${{ secrets.SENTRY__DSN_PRODUCTION }}"
        ConnectionStrings.DbConnect: "${{ secrets.CONNECTIONSTRING__PROD_PRODUCTION }}"
        SmtpServer.Account: "${{ secrets.SMTPSERVER__ACCOUNT_PRODUCTION }}"
        SmtpServer.Password: "${{ secrets.SMTPSERVER__PASSWORD_PRODUCTION }}"
        SmtpServer.Port: "${{ secrets.SMTPSERVER__PORT_PRODUCTION }}"
        SmtpServer.Server: "${{ secrets.SMTPSERVER__SERVER_PRODUCTION }}"

    - name: Production | Build Docker (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Production | Build Docker (execute with tests)
      run: | 
        BUILD_TIMESTAMP=$(date +"%Y-%m-%d at %T")
        echo Timestamp: $BUILD_TIMESTAMP
        docker build . \
        --build-arg "APP_VERSION=${{ steps.semantic.outputs.new_release_version }}" \
        --build-arg "APP_DATE_TIME=$BUILD_TIMESTAMP" \
        -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ secrets.REGISTRY_USERNAME }}:backend-production-${{ github.sha }}

    - name: Production | Push Docker image (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Production | Push Docker image (execute for new release only)
      if: steps.semantic.outputs.new_release_published == 'true'
      run: docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ secrets.REGISTRY_USERNAME }}:backend-production-${{ github.sha }}

    - name: Production | Deploy to Azure Web App (for new release only)
      uses: azure/webapps-deploy@v2
      if: steps.semantic.outputs.new_release_published == 'true'
      with:
        app-name: tokanpages-backend
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_PRODUCTION }}
        images: ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ secrets.REGISTRY_USERNAME }}:backend-production-${{ github.sha }}
