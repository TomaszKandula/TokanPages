name: Build, test and publish (master)

on:
  push:
    branches: [ master ]

jobs:

  versioning:

    runs-on: ubuntu-latest

    outputs:
      outputs1: ${{ steps.versioning.outputs.version }}
      outputs2: ${{ steps.versioning.outputs.published }}

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - name: Semantic Release (install node.js)
      uses: actions/setup-node@v1
      with:
        node-version: 16

    - name: Semantic Release (install dependencies)
      run: |
        npm install --global yarn
        yarn install

    - name: Semantic Release (process changes)
      uses: cycjimmy/semantic-release-action@v2
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
    
    - name: Move results to outputs
      id: versioning
      run: |
        echo "::set-output name=version::${{ steps.semantic.outputs.new_release_version }}"
        echo "::set-output name=published::${{ steps.semantic.outputs.new_release_published }}"

  frontend-production:

    runs-on: ubuntu-latest

    needs: versioning

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - name: Production | Build Docker (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Build Docker (execute with tests)
      run: |
        cd $PWD/TokanPages.ClientApp
        APP_VERSION=${{ needs.versioning.outputs.outputs1 }}
        BUILD_TIMESTAMP=$(date +"%Y-%m-%d at %T")
        docker build . \
        --build-arg "API_VERSION=${{ secrets.API_VERSION }}" \
        --build-arg "APP_VERSION=$APP_VERSION" \
        --build-arg "APP_DATE_TIME=$BUILD_TIMESTAMP" \
        --build-arg "APP_FRONTEND=${{ secrets.APP_FRONTEND_PRODUCTION }}" \
        --build-arg "APP_BACKEND=${{ secrets.APP_BACKEND_PRODUCTION }}" \
        --build-arg "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS_PRODUCTION }}" \
        -t ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:frontend-production-${{ github.sha }}

    - name: Production | Push Docker image (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Push Docker image
      if: needs.versioning.outputs.outputs2 == 'true'
      run: docker push ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:frontend-production-${{ github.sha }}

    # NOTE: due to a budget constraints, we use separate Azure App Service for staging slots. 
    # Microsoft Azure pricing tiers B1, B2 and B3 do not allow separate slots.
    - name: Production | Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      if: needs.versioning.outputs.outputs2 == 'true'
      with:
        app-name: tokanpages
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PROFILE_FE_PROD }}
        images: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:frontend-production-${{ github.sha }}

  backend-production:

    runs-on: ubuntu-latest
    
    needs: versioning

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - uses: Azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Azure Key Vault secrets
      uses: Azure/get-keyvault-secrets@v1
        id: vault
        with:
          keyvault: "${{ secrets.AZURE_KEY_VAULT }}"
          secrets: "${{ secrets.AZURE_KEY_VAULT_LIST }}"

    - name: Variable substitution appsettings file for Production (.NET)
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ github.workspace }}/TokanPages.Configuration/appsettings.Production.json
      env:
        Email_PrivateKey: "${{ steps.vault.outputs.ProdEmailPrivateKey }}"
        Email_BaseUrl: "${{ steps.vault.outputs.ProdEmailBaseUrl }}"
        Email_Address_Admin: "${{ steps.vault.outputs.ProdEmailAddressesAdmin }}"
        Email_Address_Contact: "${{ steps.vault.outputs.ProdEmailAddressesContact }}"
        Email_Address_Support: "${{ steps.vault.outputs.ProdEmailAddressesItSupport }}"
        Db_DatabaseContext: "${{ steps.vault.outputs.ProdDbConnect }}"
        Db_DatabaseContext_Migrator: "${{ steps.vault.outputs.ProdDbMigrator }}"
        AZ_Storage_BaseUrl: "${{ steps.vault.outputs.ProdAzStorageBaseUrl }}"
        AZ_Storage_ContainerName: "${{ steps.vault.outputs.ProdAzStorageContainerName }}"
        AZ_Storage_ConnectionString: "${{ steps.vault.outputs.ProdAzStorageConnectionString }}"
        AZ_Storage_MaxFileSizeUserMedia: "${{ steps.vault.outputs.ProdAzStorageMaxFileSizeUserMedia }}"
        AZ_Storage_MaxFileSizeSingleAsset: "${{ steps.vault.outputs.ProdAzStorageMaxFileSizeSingleAsset }}"
        AZ_Redis_InstanceName: "${{ steps.vault.outputs.ProdAzRedisInstanceName }}"
        AZ_Redis_ConnectionString: "${{ steps.vault.outputs.ProdAzRedisConnectionString }}"
        AZ_Redis_ExpirationMinute: "${{ steps.vault.outputs.ProdAzRedisExpirationMinute }}"
        AZ_Redis_ExpirationSecond: "${{ steps.vault.outputs.ProdAzRedisExpirationSecond }}"
        Paths_UpdateSubscriber: "${{ steps.vault.outputs.ProdPathsUpdateSubscriber }}"
        Paths_Unsubscribe: "${{ steps.vault.outputs.ProdPathsUnsubscribe }}"
        Paths_UpdatePassword: "${{ steps.vault.outputs.ProdPathsUpdatePassword }}"
        Paths_Activation: "${{ steps.vault.outputs.ProdPathsActivation }}"
        Paths_DevelopmentOrigin: "${{ steps.vault.outputs.ProdPathsDevelopmentOrigin }}"
        Paths_DeploymentOrigin: "${{ steps.vault.outputs.ProdPathsDeploymentOrigin }}"
        Paths_Templates_Newsletter: "${{ steps.vault.outputs.ProdPathsNewsletter }}"
        Paths_Templates_ContactForm: "${{ steps.vault.outputs.ProdPathsContactForm }}"
        Paths_Templates_ResetPassword: "${{ steps.vault.outputs.ProdPathsResetPassword }}"
        Paths_Templates_RegisterForm: "${{ steps.vault.outputs.ProdPathsRegisterForm }}"
        Ids_Issuer: "${{ steps.vault.outputs.ProdIdsIssuer }}"
        Ids_Audience: "${{ steps.vault.outputs.ProdIdsAudience }}"
        Ids_WebSecret: "${{ steps.vault.outputs.ProdIdsWebSecret }}"
        Ids_RequireHttps: "${{ steps.vault.outputs.ProdIdsRequireHttps }}"
        Ids_WebToken_Maturity: "${{ steps.vault.outputs.ProdIdsWebTokenMaturity }}"
        Ids_RefreshToken_Maturity: "${{ steps.vault.outputs.ProdIdsRefreshTokenMaturity }}"
        Limit_Reset_Maturity: "${{ steps.vault.outputs.ProdLimitsResetMaturity }}"
        Limit_Activation_Maturity: "${{ steps.vault.outputs.ProdLimitsActivationMaturity }}"
        Limit_Likes_Anonymous: "${{ steps.vault.outputs.ProdLimitsLikesAnonymous }}"
        Limit_Likes_User: "${{ steps.vault.outputs.ProdLimitsLikesUser }}"

    - name: Production | Build Docker (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Build Docker (execute with tests)
      run: |
        docker build . \
        --build-arg "ENV_VALUE=Production" \
        -t ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:backend-production-${{ github.sha }}

    - name: Production | Push Docker image (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Push Docker image (execute for new release only)
      if: needs.versioning.outputs.outputs2 == 'true'
      run: docker push ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:backend-production-${{ github.sha }}

    # NOTE: due to a budget constraints, we use separate Azure App Service for staging slots. 
    # Microsoft Azure pricing tiers B1, B2 and B3 do not allow separate slots.
    - name: Production | Deploy to Azure Web App (for new release only)
      uses: azure/webapps-deploy@v2
      if: needs.versioning.outputs.outputs2 == 'true'
      with:
        app-name: tokanpages-backend
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PROFILE_BE_PROD }}
        images: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:backend-production-${{ github.sha }}
