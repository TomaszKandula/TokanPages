name: Build, test and publish (master)

on:
  push:
    branches: [ master ]

jobs:

  versioning:

    runs-on: ubuntu-latest

    outputs:
      outputs1: ${{ steps.versioning.outputs.version }}
      outputs2: ${{ steps.versioning.outputs.published }}

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - name: Semantic Release (install node.js)
      uses: actions/setup-node@v1
      with:
        node-version: 14

    - name: Semantic Release (install dependencies)
      run: |
        npm install --global yarn
        yarn install

    - name: Semantic Release (process changes)
      uses: cycjimmy/semantic-release-action@v2
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
    
    - name: Move results to outputs
      id: versioning
      run: |
        echo "::set-output name=version::${{ steps.semantic.outputs.new_release_version }}"
        echo "::set-output name=published::${{ steps.semantic.outputs.new_release_published }}"

  frontend-production:

    runs-on: ubuntu-latest

    needs: versioning

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0

    - name: Production | Build Docker (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Build Docker (execute with tests)
      run: |
        cd $PWD/TokanPages.ClientApp
        APP_VERSION=${{ needs.versioning.outputs.outputs1 }}
        BUILD_TIMESTAMP=$(date +"%Y-%m-%d at %T")
        docker build . \
        --build-arg "APP_VERSION=$APP_VERSION" \
        --build-arg "APP_DATE_TIME=$BUILD_TIMESTAMP" \
        --build-arg "APP_FRONTEND=${{ secrets.APP_FRONTEND_PRODUCTION }}" \
        --build-arg "APP_BACKEND=${{ secrets.APP_BACKEND_PRODUCTION }}" \
        --build-arg "APP_SENTRY=${{ secrets.APP_SENTRY_PRODUCTION }}" \
        --build-arg "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS_PRODUCTION }}" \
        -t ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:frontend-production-${{ github.sha }}

    - name: Production | Push Docker image (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Push Docker image
      if: needs.versioning.outputs.outputs2 == 'true'
      run: docker push ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:frontend-production-${{ github.sha }}

    - name: Production | Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      if: needs.versioning.outputs.outputs2 == 'true'
      with:
        app-name: tokanpages
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_FRONTEND_PROD }}
        images: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:frontend-production-${{ github.sha }}

  backend-production:

    runs-on: ubuntu-latest
    
    needs: versioning

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2.2.0
    
    - name: Variable substitution appsettings file for Staging (NET Core)
      uses: microsoft/variable-substitution@v1
      with:
        files: ${{ github.workspace }}/TokanPages.WebApi/appsettings.Staging.json
      env:
        ApplicationPaths.UpdateSubscriberPath: "${{ secrets.APPLICATIONPATHS__UPDATESUBSCRIBERPATH_STAGE }}"
        ApplicationPaths.UnsubscribePath: "${{ secrets.APPLICATIONPATHS__UNSUBSCRIBEPATH_STAGE }}"
        ApplicationPaths.UpdatePasswordPath: "${{ secrets.APPLICATIONPATHS__UPDATEPASSWORDPATH_STAGE }}"
        ApplicationPaths.ActivationPath: "${{ secrets.APPLICATIONPATHS__ACTIVATIONPATH_STAGE }}"
        ApplicationPaths.DevelopmentOrigin: "${{ secrets.APPLICATIONPATHS__DEVELOPMENTORIGIN_STAGE }}"
        ApplicationPaths.DeploymentOrigin: "${{ secrets.APPLICATIONPATHS__DEPLOYMENTORIGIN_STAGE }}"
        AzureStorage.BaseUrl: "${{ secrets.AZURESTORAGE__BASEURL_STAGE }}"
        AzureStorage.ContainerName: "${{ secrets.AZURESTORAGE__CONTAINERNAME_STAGE }}"
        AzureStorage.ConnectionString: "${{ secrets.AZURESTORAGE__CONNECTIONSTRING_STAGE }}"
        Sentry.Dsn: "${{ secrets.SENTRY__DSN_STAGE }}"
        ConnectionStrings.DbConnect: "${{ secrets.CONNECTIONSTRINGS__DBCONNECT_STAGE }}"
        ConnectionStrings.DbConnectTest: "${{ secrets.CONNECTIONSTRINGS__DBCONNECT_TEST }}"
        EmailSender.PrivateKey: "${{ secrets.EMAILSENDER__PRIVATEKEY_STAGE }}"
        EmailSender.BaseUrl: "${{ secrets.EMAILSENDER__BASEURL_STAGE }}"
        IdentityServer.Issuer: "${{ secrets.IDENTITYSERVER__ISSUER_STAGE }}"
        IdentityServer.Audience: "${{ secrets.IDENTITYSERVER__AUDIENCE_STAGE }}"
        IdentityServer.WebSecret: "${{ secrets.IDENTITYSERVER__WEBSECRET_STAGE }}"
        IdentityServer.RequireHttps: "${{ secrets.IDENTITYSERVER__REQUIREHTTPS_STAGE }}"
        IdentityServer.WebTokenExpiresIn: "${{ secrets.IDENTITYSERVER__WEBTOKENEXPIRESIN_STAGE }}"
        IdentityServer.RefreshTokenExpiresIn: "${{ secrets.IDENTITYSERVER__REFRESHTOKENEXPIRESIN_STAGE }}"
        ExpirationSettings.ResetIdExpiresIn: "${{ secrets.EXPIRATIONSETTINGS__RESETIDEXPIRESIN_STAGE }}"
        ExpirationSettings.ActivationIdExpiresIn: "${{ secrets.EXPIRATIONSETTINGS__ACTIVATIONIDEXPIRESIN_STAGE }}"
        SonarQube.Server: "${{ secrets.SONARQUBE_HOST }}"
        SonarQube.Token: "${{ secrets.SONARQUBE_TOKEN_API }}"

    - name: Production | Build Docker (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Build Docker (execute with tests)
      run: | 
        docker build . \
        -t ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:backend-production-${{ github.sha }}

    - name: Production | Push Docker image (prepare)
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}
        username: ${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}
        password: ${{ secrets.DOCKER_REGISTRY_SERVER_PASSWORD }}

    - name: Production | Push Docker image (execute for new release only)
      if: needs.versioning.outputs.outputs2 == 'true'
      run: docker push ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:backend-production-${{ github.sha }}

    - name: Production | Deploy to Azure Web App (for new release only)
      uses: azure/webapps-deploy@v2
      if: needs.versioning.outputs.outputs2 == 'true'
      with:
        app-name: tokanpages-backend
        slot-name: production
        publish-profile: ${{ secrets.AZURE_PUBLISH_PROFILE_BACKEND_PROD }}
        images: ${{ secrets.DOCKER_REGISTRY_SERVER_URL }}/${{ secrets.DOCKER_REGISTRY_SERVER_USERNAME }}:backend-production-${{ github.sha }}
